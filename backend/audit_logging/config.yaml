version: 1
disable_existing_loggers: False

formatters:
  omni_sys:
    (): audit_logging.utils.TimezoneFormatter
    format: "OMNI-SYS - Backend -- %(levelname)s - %(asctime)s - %(module)s - %(funcName)s() - %(message)s"

  db_change:
    (): audit_logging.utils.TimezoneFormatter
    format: "OMNI-SYS - DB_CHANGE -- %(levelname)s - %(asctime)s - %(message)s"

filters:
  below_error:
    (): audit_logging.utils.BelowErrorFilter

handlers:
  stdout_handler:
    class: logging.StreamHandler
    level: DEBUG
    formatter: omni_sys
    stream: ext://sys.stdout
    filters: [below_error] # I need to ony log levels between DEBUG and WARNING, but not ERROR or CRITICAL since they are logged to stderr
  
  stderr_handler:
    class: logging.StreamHandler
    level: ERROR
    formatter: omni_sys
    stream: ext://sys.stderr

  user_action_file_handler:
    class: logging.handlers.TimedRotatingFileHandler
    level: INFO
    formatter: omni_sys
    filename: logs/user_action_logs/user_actions.log
    when: midnight        # Rotate at midnight
    interval: 1           # Every 1 day
    backupCount: 30       # Keep 30 days of logs
    encoding: utf8

  db_change_file_handler:
    class: logging.handlers.TimedRotatingFileHandler
    level: INFO
    formatter: db_change
    filename: logs/db_change_logs/db_changes.log
    when: midnight
    interval: 1
    backupCount: 30
    encoding: utf8

loggers:
  omnisyslogger: # specify one logger for all logs we want to log
    level: DEBUG
    handlers: [stdout_handler, stderr_handler, user_action_file_handler]
    propagate: no

  db_logger:
    level: INFO
    handlers: [db_change_file_handler]
    propagate: no

root: # all other logs (e.g. from libraries) should be logged with a different handler and therefore different format
  level: DEBUG
  handlers: [stderr_handler]
